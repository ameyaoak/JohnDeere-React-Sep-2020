create-react-app - creates application setup using webpack (web app bundler), bundled for deployment

1. compile js files
2. minified
3. uglyfied
4. versioned
5. updated in html page

above same happens for css


all done by task runners - 
like grunt, webpack

go to folder to generate application and run
npx create-react-app app-name


package.json - manifest file of applications
			- has dependencies and scripts 
			- we add the external dependencies in there
			- we add script there
			- react scripts has all webpack config

			- scripts has all the commands to run the app
			- react scripts are globally insatlled


We use ES6 modules to modularize app code
1. Everything defined in js or jsx file is consideted private to that file
2. if any entity has to be made public it has to be explicetly exported.
3. if any public entity has to be used then it has to be explicetly imported.


----------------------------------------------
functions defined in js file need to be publically exposed using export

similarly need to be inported using import

The above are assembled in a Module object and that object is exported


There can be only 1 default export 

CSS import copies contains of css file in index.js


import ./ = import private files (as they have ./)
import React = node modeules not private app files

----------------------------------------------

* Since React 15 a function can also be treated as a component
Adviced compared to class components as it dosent create classes but direct components.


Installing redux - 

npm install redux 
OR 
yarn add redux


Importing the default export object as 
import calc from './calculator' in index.js

4 ways to do import as in index.js example
----------------------------------------------

Folder structure

src
	/bugTracker
		/actions - logic
		/views - has child components
		index.js - has defination for the component class
	/reducers
		/bugsReducer.js
	/store
		index.js - logic for creating the store

----------------------------------------------



Other commands for node
npm install yarn -g
yarn/npm are the package managers (yarn is latest)
to install external dependencies stick to eighter yarn/npm.
emmet - for html completion (extension in vs code)



JSON Server 
Make a mock json
open new terminal window and go to the folder containing the mocked json (db.json)

npx json-server db.json -p 3030.
this will expose endpoints for the data.


Axios - rest client (with promise)
yarn add axios

every .then returns a promise 

Always return promise from functions that performs async operation
as the operation will be completed later


Middleeare of redux can be used as CORS
Middleware is like util function for shared function across application
more details : https://github.com/tkmagesh/JohnDeere-React-Sep-2020/commit/2e0071711542532f2e8870d5592eaef1ba2b310f


primary component is the container component as it interacts
with redux infra


presentation components are dumb components as it gets data and
actions from the container component and dosent interacts
with redux infra


React - Redux component
	has connect function - to extract data to be passed to components
	also action dispatchers can be passed to components

	has provider function - this makes redux store available to components

	yarn add react-redux



	react hooks --------



Routing - in react

yarn add react-router-dom

ref : https://reactrouter.com/web/guides/quick-start

phpjabbers


Hooks are functions that manage side effect of a functional component

hook functions must start with a word use

built in hooks in react -
	1. useState
	2. useEffect
	3. useMemo
	4. useReducer
	5. useRef




Package and deploy
	1. Compile JSX
	2. Minify JS
	3. Uglify JS files
	4. Bundle JS files (multiple files to 1 file)
	5. Version the js file (to avoid cached script files getting used)
	6. compile scss/less/compas
	7. minify css
	8. bundle css
	9. version css
	10. update ref of build generator js and css file in index.html
	11. minify index.html
	12. generated resources to be copied to build folder for deployment


	we do this using 
	yarn build or npm run build
	(webpack config)

	build folder is output of this

the script behind this building is global 
you can run below commands for customized scripts

yarn eject
npm run eject

this will increase lot of dependencies in pkg file

thre is a new folder scripts which has all the scripts ejected



